// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_mockgen is a generated GoMock package.
package mock_mockgen

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mitooos/thesis/mockgen/model"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// InsertUser mocks base method.
func (m *MockUserRepository) InsertUser(arg0 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockUserRepositoryMockRecorder) InsertUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserRepository)(nil).InsertUser), arg0)
}

// MockSecurityHelper is a mock of SecurityHelper interface.
type MockSecurityHelper struct {
	ctrl     *gomock.Controller
	recorder *MockSecurityHelperMockRecorder
}

// MockSecurityHelperMockRecorder is the mock recorder for MockSecurityHelper.
type MockSecurityHelperMockRecorder struct {
	mock *MockSecurityHelper
}

// NewMockSecurityHelper creates a new mock instance.
func NewMockSecurityHelper(ctrl *gomock.Controller) *MockSecurityHelper {
	mock := &MockSecurityHelper{ctrl: ctrl}
	mock.recorder = &MockSecurityHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecurityHelper) EXPECT() *MockSecurityHelperMockRecorder {
	return m.recorder
}

// HashPassword mocks base method.
func (m *MockSecurityHelper) HashPassword(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockSecurityHelperMockRecorder) HashPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockSecurityHelper)(nil).HashPassword), arg0)
}
